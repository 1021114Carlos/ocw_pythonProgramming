# Assignment
import math

deck = 52

two_pair = {"heart": [2, 5], "spade": 2, "diamond": ["Q", "K"], "treble": 5}
#print(two_pair)

threeOfaKind = {"heart": [2, "K"], "treble": [2, 5], "spade": [2, 9]}
#print(threeOfaKind)

# first let's look at all the possibilities of 6 cards out of 52


combination = math.comb(deck, 6)
#print("number of ways to choose 6 cards out of 52:", combination)

# two-pair ranks. two additional ranks. out of 13 ranks
# choosing two ranks
twoRanks = math.comb(13, 2)

# choosing suits. out of 4 suits
# but we need two pairs. 
suits = (math.comb(4, 2))**6
print(suits)

# choosing remaining ranks. 
remainingRanks = math.comb(11, 2)

# choose suits for remaining cards. 
otherRanks = 4**2

# prod takes two arguments. probability_twoPair = math.prod(twoRanks, suits, remainingRanks, otherRanks)

from itertools import combinations

def factorial(n):
  """Calculates the factorial of a number"""
  if n == 0:
    return 1
  else:
    return n * factorial(n-1)

def n_choose_k(n, k):
  """Calculates n choose k"""
  return factorial(n) // (factorial(k) * factorial(n-k))

def two_pair_probability():
  """Calculates the probability of a two-pair hand"""
  # Choose 2 ranks for the pairs (out of 13)
  choose_ranks = n_choose_k(13, 2)

  # For each rank, choose 2 cards (out of 4)
  two_from_four = 4 * 4

  # Choose 1 card for each of the remaining 2 ranks (out of 3 for each)
  one_from_three = 3 * 3

  # Total number of hands
  total_hands = n_choose_k(52, 6)

  return (choose_ranks * two_from_four * one_from_three) / total_hands

def three_of_a_kind_probability():
  """Calculates the probability of a three-of-a-kind hand"""
  # Choose 1 rank for the three cards (out of 13)
  choose_rank = n_choose_k(13, 1)

  # Choose 3 cards from that rank (out of 4)
  three_from_four = 4

  # Choose 1 card for each of the remaining 3 ranks (out of 3 for each)
  one_from_three = 3 * 3 * 3

  # Total number of hands
  total_hands = n_choose_k(52, 6)

  return (choose_rank * three_from_four * one_from_three) / total_hands

# Calculate probabilities
two_pair_prob = two_pair_probability()
three_of_a_kind_prob = three_of_a_kind_probability()

# Print results
print("Probability of two-pair hand:", two_pair_prob)
print("Probability of three-of-a-kind hand:", three_of_a_kind_prob)

# Compare probabilities
if two_pair_prob > three_of_a_kind_prob:
  print("Two-pair hand is more probable.")
else:
  print("Three-of-a-kind hand is more probable.")

